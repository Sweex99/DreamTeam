<TST>
В якому варіанті вказані оператори порівняння?
1.+, -, *, /,  %, ++, --
2.==, !=, >, <, >=, <=!true!
3.&, ^, ~, <<, >>, >>>
4.&&, !, ||
В якому варіанті вказані логічні оператори?
1.+, -, *, /,  %, ++, --
2.==, !=, >, <, >=, <=
3.&, ^, ~, <<, >>, >>>!true!
4.&&, !, ||
В якому варіанті вказані побітові оператори?
1.+, -, *, /,  %, ++, --
2.==, !=, >, <, >=, <=
3.&, ^, ~, <<, >>, >>>
4.&&, !, ||!true!
В якому варіанті вказані оператори присвоювання?
1.+, -, *, /,  %, ++, --
2.==, !=, >, <, >=, <=
3.=, *=, %=, <<=, ^=!true!
4.&&, !, ||
Який варіант відповіді описує цикл while?
1.Повторює оператор чи групу операторів, поки задана умова є true!true!
2.Виконує послідовність операторів декілька разів і зменшує код ким керує змінна циклу
3.виконує цикл while, але не перевіряє умову в кінці циклу 
4.Виконує послідовність операторів декілька разів
Який варіант відповіді описує цикл for?
1.Повторює оператор чи групу операторів, поки задана умова є true
2.Виконує послідовність операторів декілька разів і зменшує код ким керує змінна циклу!true!
3.виконує цикл while, але не перевіряє умову в кінці циклу 
4.Виконує послідовність операторів декілька разів
Який варіант відповіді описує цикл do…while?
1.Повторює оператор чи групу операторів, поки задана умова є true
2.Виконує послідовність операторів декілька разів і зменшує код ким керує змінна циклу
3.виконує цикл while, але не перевіряє умову в кінці циклу !true!
4.Виконує послідовність операторів декілька разів
Який варіант відповіді описує оператор if?
1.складається з логічних виразів, після яких слідує один або більше операторів!true!
2.може супроводжуватися додатковим оператором, який виконується при складному логічному виразі
3.можна використовувати для заміни операторів if…else
4.дозволяє змінній бути перевіреною на рівність у відношенні списку значень
Який варіант відповіді описує оператор if…else?
1.складається з логічних виразів, після яких слідує один або більше операторів
2.може супроводжуватися додатковим оператором, який виконується при складному логічному виразі!true!
3.можна використовувати для заміни операторів if…else
4.дозволяє змінній бути перевіреною на рівність у відношенні списку значень
Який варіант відповіді описує умовний оператор (?:)?
1.складається з логічних виразів, після яких слідує один або більше операторів
2.може супроводжуватися додатковим оператором, який виконується при складному логічному виразі
3.можна використовувати для заміни операторів if…else!true!
4.дозволяє змінній бути перевіреною на рівність у відношенні списку значень
Який варіант відповіді описує оператор switch?
1.складається з логічних виразів, після яких слідує один або більше операторів
2.може супроводжуватися додатковим оператором, який виконується при складному логічному виразі
3.можна використовувати для заміни операторів if…else
4.дозволяє змінній бути перевіреною на рівність у відношенні списку значень!true!
Який метод повертає відповідний числовий об’єкт, що містить значення перданого аргумента?
1.valueOf()!true!
2.max()
3.toString()
4.toDegrees()
Який метод повертає максимальне значення з двох аргументів?
1.valueOf()
2.max()!true!
3.toString()
4.toDegrees()
Який метод змінює об’єкт в рядок?
1.valueOf()
2.max()
3.toString()!true!
4.toDegrees()
Який метод змінює радіани в градуси?
1.valueOf()
2.max()
3.toString()
4.toDegrees()!true!
Який метод повертає арктангенс вказаний в радіанах значення?
1.valueOf()
2.atan()!true!
3.toString()
4.random()
Який метод використовується для генерування випадкового числа від 0.0 до 1.0?
1.valueOf()
2.atan()
3.toString()
4.random()!true!
Який метод визначає чи є значення вказаного типу char буквою?
1.isLetter()!true!
2.isDigit()
3.isWhitespace()
4.isUpperCase()
Який метод визначає чи є значення вказаного типу char цифрою?
1.isLetter()
2.isDigit()!true!
3.isWhitespace()
4.isUpperCase()
Який метод визначає чи є значення вказаного типу char у верхньому регістрі?
1.isLetter()
2.isDigit()
3.isWhitespace()
4.isUpperCase()!true!
Які методи виконують заміну тексту, що співпадає з заданим регулярним виразом?
1.Методи matches і lookingAt
2.Методи replaceFirst і replaceAll!true!
3.Методи start і end
4.Методи класа PatternSyntaxException
Що робить метод класу PatternSyntaxException: public String getDescription()?
1.Надає опис помилки!true!
2.надає індекс помилки
3.надає шаблон регулярного виразу, який містить помилку
4.проводить повернення багаторядкового рядка, що містить опис синтаксичної помилки та її індекс, помилковий зразок регулярного виразу, а також візуальну індикацію індекса помилки в шаблоні
Що робить метод класу PatternSyntaxException: public int getIndex()?
1.Надає опис помилки
2.надає індекс помилки! true!
3.надає шаблон регулярного виразу, який містить помилку
4.проводить повернення багаторядкового рядка, що містить опис синтаксичної помилки та її індекс, помилковий зразок регулярного виразу, а також візуальну індикацію індекса помилки в шаблоні
Що робить метод класу PatternSyntaxException: public String getPattern()?
1.Надає опис помилки
2.надає індекс помилки
3.надає шаблон регулярного виразу, який містить помилку!true!
4.проводить повернення багаторядкового рядка, що містить опис синтаксичної помилки та її індекс, помилковий зразок регулярного виразу, а також візуальну індикацію індекса помилки в шаблоні
Що робить метод класу PatternSyntaxException: public String getMessage()?
1.Надає опис помилки
2.надає індекс помилки
3.надає шаблон регулярного виразу, який містить помилку
4.проводить повернення багаторядкового рядка, що містить опис синтаксичної помилки та її індекс, помилковий зразок регулярного виразу, а також візуальну індикацію індекса помилки в шаблоні!true!
Для чого потрібне ключове слово void?
1.виконує процес, що приводить до передачі аргументів
2.дозволяє створити методи, що приводять до повернення значення
3.Дозволяє створити методи, що не приводять до повернення значення!true!
4.використовується для посилання на поточний клас з урахуванням методу та конструктора екземпляру
В чому полягає використання ключового слова this?
1.виконує процес, що приводить до передачі аргументів
2.дозволяє створити методи, що приводять до повернення значення
3.Дозволяє створити методи, що не приводять до повернення значення
4.використовується для посилання на поточний клас з урахуванням методу та конструктора екземпляру!true!
Що являє собою випадок, коли в класі є два чи більше метода з однаковим ім’ям, але різними параметрами?
1.виклик методів
2.передача параметрів
3.перезавантаження методів!true!
4.створення методів
Лише в якому складі використовується ключове слово this?
1.у складі методів або конструкторів екземпляра!true!
2.у складі методів
3.у складі конструкторів екземпляра
4.у складі
Яке ключове слово використовується для диференціювання між змінними екземпляру і локальними змінними у випадку коли в них однакові імена, в складі конструктора і метода?
1.enum
2.new
3.super
4.this!true!